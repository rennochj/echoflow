[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "echoflow"
version = "0.1.0"
description = "Document Conversion MCP Server with AI-powered processing"
authors = [
    {name = "EchoFlow Development Team"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["mcp", "document-conversion", "ai", "markdown", "docling"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
]
dependencies = [
    # MCP Framework
    "mcp>=1.0.0",
    
    # Core Libraries
    "pydantic>=2.0.0",
    "structlog>=23.0.0",
    "asyncio-mqtt>=0.13.0",
    
    # Document Processing - Primary Engine
    "docling>=2.0.0",
    "torch>=2.0.0",  # For AI model support
    "transformers>=4.30.0",  # For model management
    
    # Document Processing - Fallback Libraries  
    "pdfplumber>=0.10.0",
    "python-docx>=1.1.0",
    "pypandoc>=1.13",
    
    # Utility Libraries
    "aiofiles>=23.0.0",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.11.0",
    
    # Code Quality
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    
    # Development Tools
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
]

[project.scripts]
echoflow = "echoflow.cli:main"

[project.urls]
Homepage = "https://github.com/echoflow/echoflow"
Repository = "https://github.com/echoflow/echoflow.git"
Documentation = "https://echoflow.readthedocs.io"

# Tool Configuration
[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/echoflow",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=60",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]